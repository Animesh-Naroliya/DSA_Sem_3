#include <iostream>
using namespace std;

int partition(int arr[], int low, int high)
{
    int pivot = arr[(low + high) / 2];

    while (true)
    {
        while (arr[low] < pivot)
        {
            low++;
        }
        while (arr[high] > pivot)
        {
            high--;
        }
        if (low >= high)
        {
            return high;
        }
        swap(arr[low], arr[high]);
        low++;
        high--;
    }
}

void QuickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pivot_index = partition(arr, low, high);
        QuickSort(arr, low, pivot_index);
        QuickSort(arr, pivot_index + 1, high);
    }
}

void merge(int arr[], int left, int middle, int right)
{
    int n1 = middle - left + 1;
    int n2 = right - middle;
    
    int L[n1], R[n2];
    
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[middle + 1 + j];
    
    int i = 0, j = 0, k = left;
    
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right)
{
    if (left < right)
    {
        int middle = left + (right - left) / 2;
        
        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);
        
        merge(arr, left, middle, right);
    }
}

void bubbleSort(int arr[], int size)
{
    for (int i = 0; i < size - 1; i++)
    {
        for (int j = 0; j < size - i - 1; j++)
        {
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
        }
    }
}

void selectionSort(int arr[], int size)
{
    for (int i = 0; i < size - 1; i++)
    {
        int minIndex = i;
        for (int j = i + 1; j < size; j++)
        {
            if (arr[j] < arr[minIndex])
                minIndex = j;
        }
        swap(arr[i], arr[minIndex]);
    }
}

void insertionSort(int arr[], int size)
{
    for (int i = 1; i < size; i++)
    {
        int key = arr[i];
        int j = i - 1;
        
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j--;
        }
        
        arr[j + 1] = key;
    }
}

void displayArray(int arr[], int size)
{
    for(int i=0; i<size; i++)
    {
        cout<<arr[i]<<" ";
    }
    cout << endl;
}

int main()
{
    int choice, size, change;
    
    cout << "Enter the size of array : ";
    cin >> size;
    
    int arr[size];
    
    cout << "Enter the elements of array separated by a space : ";
    for (int i = 0; i < size; i++)
    {
        cin >> arr[i];
    }

    while (true)
    {
        cout << "Do you want to change the array (y/n) ";
        cin >> change;
        
        if (change == 'y' || change == 'Y')
        {
            cout << "Enter the elements of array separated by a space : ";
            for (int i = 0; i < size; i++)
            {
                cin >> arr[i];
            }
        }
        else if (change == 'n' || change == 'N')
        {
            break;
        }
        else
        {
            cout << "Invalid input. Enter 'y' to change or 'n' to continue: ";
        }

        cout << "Enter the choice : ";
        cin >> choice;
        cout << "\n\n\nMENU\n\n";
        cout << "1. Merge Sort." << endl;
        cout << "2. Quick Sort." << endl;
        cout << "3. Selection Sort." << endl;
        cout << "4. Insertion Sort." << endl;
        cout << "5. Bubble Sort." << endl;
        cout << "6. Exit the program." << endl;

        switch (choice)
        {
            case 1:
                cout << "Merge Sort " << endl;
                mergeSort(arr, 0, size - 1);
                displayArray(arr, size);
                break;

            case 2:
                cout << "Quick Sort." << endl;
                QuickSort(arr, 0, size - 1);
                displayArray(arr, size);
                break;

            case 3:
                cout << "Selection Sort " << endl;
                selectionSort(arr, size);
                displayArray(arr, size);
                break;

            case 4:
                cout << "Insertion Sort " << endl;
                insertionSort(arr, size);
                displayArray(arr, size);
                break;

            case 5:
                cout << "Bubble Sort " << endl;
                bubbleSort(arr, size);
                displayArray(arr, size);
                break;

            case 6:
                return 0;

            default:
                cout << "Invalid Input." << endl;
                break;
        }
    }

    return 0;
}
